<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.abcsys.devops.v2.deployer.db.dao.V2VersionMapper" >
  <resultMap id="BaseResultMap" type="cn.abcsys.devops.v2.deployer.db.model.V2Version" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="application_id" property="applicationId" jdbcType="INTEGER" />
    <result column="version_name" property="versionName" jdbcType="VARCHAR" />
    <result column="version_type" property="versionType" jdbcType="VARCHAR" />
    <result column="replica" property="replica" jdbcType="INTEGER" />
    <result column="create_datetime" property="createDatetime" jdbcType="TIMESTAMP" />
    <result column="delete_datetime" property="deleteDatetime" jdbcType="TIMESTAMP" />
    <result column="old_version_id" property="oldVersionId" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="V2VersionCount" type="cn.abcsys.devops.v2.deployer.db.model.V2VersionCount" >
    <id column="application_id" property="applicationId" jdbcType="INTEGER" />
    <result column="versionCount" property="versionCount" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, application_id, version_name, version_type, replica, create_datetime, delete_datetime,
    old_version_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from v2_version
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="getTotalNumByApplicationId" resultType="java.lang.Integer" >
    select count(*)
    from v2_version t1
    where t1.application_id  =  #{appId,jdbcType=INTEGER}
    and t1.delete_datetime IS NULL
  </select>

  <select id="getTotalNumByVersionName" resultType="java.lang.Integer" >
    select count(*)
    from v2_version
    where version_name LIKE CONCAT('%', #{versionName,jdbcType=VARCHAR}, '%')
    and delete_datetime IS NULL
  </select>

  <select id="getTotalNumOfLaterVersionByVersionId" resultType="java.lang.Integer" >
    select count(*)
    from v2_version t1
    where t1.application_id  =  #{appId,jdbcType=INTEGER}
    AND id > #{versionId,jdbcType=INTEGER}
    and t1.delete_datetime IS NULL
  </select>

  <select id="getTotalNumOfEarlierVersionByVersionId" resultType="java.lang.Integer" >
    select count(*)
    from v2_version t1
    where t1.application_id  =  #{appId,jdbcType=INTEGER}
    AND #{versionId,jdbcType=INTEGER} > id
    and t1.delete_datetime IS NULL
  </select>

  <select id="getTotalNumByField" resultType="java.lang.Integer" >
    select count(*)
    from v2_version
    where id > 0
    <if test="version.applicationId != null" >
      and application_id = #{version.applicationId,jdbcType=INTEGER}
    </if>
    <if test="version.versionName != null" >
      and version_name LIKE CONCAT('%', #{version.versionName,jdbcType=VARCHAR}, '%')
    </if>
    and delete_datetime IS NULL
  </select>

  <select id="selectVersionByApplicationId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from v2_version
    where application_id = #{appId,jdbcType=INTEGER}
    and delete_datetime IS NULL
    limit #{start,jdbcType=INTEGER}, #{num,jdbcType=INTEGER}
  </select>

  <select id="selectVersionByField" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from v2_version
    where id > 0
    <if test="version.applicationId != null" >
      and application_id = #{version.applicationId,jdbcType=INTEGER}
    </if>
    <if test="version.versionName != null" >
      and version_name LIKE CONCAT('%', #{version.versionName,jdbcType=VARCHAR}, '%')
    </if>
    and delete_datetime IS NULL
    ORDER BY id DESC
    limit #{start,jdbcType=INTEGER}, #{num,jdbcType=INTEGER}
  </select>

  <select id="selectTop5VersionApplication" resultMap="V2VersionCount">
    select
    COUNT(id) as versionCount, application_id
    from v2_version
    where application_id in
    <foreach collection="list" item="applicationId" index="index"
             open="(" close=")" separator=",">
      #{applicationId}
    </foreach>
    and delete_datetime IS NULL
    GROUP BY application_id
    ORDER BY versionCount
    DESC
    limit 0, 5
  </select>

  <select id="selectDescVersionApplication" resultMap="V2VersionCount">
    select
    COUNT(id) as versionCount, application_id
    from v2_version
    where application_id in
    <foreach collection="list" item="applicationId" index="index"
             open="(" close=")" separator=",">
      #{applicationId}
    </foreach>
    and delete_datetime IS NULL
    GROUP BY application_id
    ORDER BY versionCount
    DESC
  </select>

  <select id="selectVersionByVersionName" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from v2_version
    where version_name LIKE CONCAT('%', #{versionName,jdbcType=VARCHAR}, '%')
    and delete_datetime IS NULL
    limit #{start,jdbcType=INTEGER}, #{num,jdbcType=INTEGER}
  </select>

  <select id="selectVersionByExactVersionName" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from v2_version
    where version_name = #{versionName,jdbcType=VARCHAR}
    AND application_id = #{appId,jdbcType=INTEGER}
    and delete_datetime IS NULL
    limit #{start,jdbcType=INTEGER}, #{num,jdbcType=INTEGER}
  </select>

  <select id="selectAllVersionByApplicationId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from v2_version
    where application_id = #{appId,jdbcType=INTEGER}
    and delete_datetime IS NULL
  </select>

  <select id="selectLaterVersionByVersionId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from v2_version
    where application_id = #{appId,jdbcType=INTEGER}
    AND id > #{versionId,jdbcType=INTEGER}
    and delete_datetime IS NULL
    limit #{start,jdbcType=INTEGER}, #{num,jdbcType=INTEGER}
  </select>

  <select id="selectEarlierVersionByVersionId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from v2_version
    where application_id = #{appId,jdbcType=INTEGER}
    AND #{versionId,jdbcType=INTEGER} > id
    and delete_datetime IS NULL
    limit #{start,jdbcType=INTEGER}, #{num,jdbcType=INTEGER}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from v2_version
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.abcsys.devops.v2.deployer.db.model.V2Version" useGeneratedKeys="true" keyProperty="id" >
    insert into v2_version (id, application_id, version_name,
    version_type, replica, create_datetime,
    delete_datetime, old_version_id)
    values (#{id,jdbcType=INTEGER}, #{applicationId,jdbcType=INTEGER}, #{versionName,jdbcType=VARCHAR},
    #{versionType,jdbcType=VARCHAR}, #{replica,jdbcType=INTEGER}, #{createDatetime,jdbcType=TIMESTAMP},
    #{deleteDatetime,jdbcType=TIMESTAMP}, #{oldVersionId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cn.abcsys.devops.v2.deployer.db.model.V2Version" useGeneratedKeys="true" keyProperty="id" >
    insert into v2_version
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="applicationId != null" >
        application_id,
      </if>
      <if test="versionName != null" >
        version_name,
      </if>
      <if test="versionType != null" >
        version_type,
      </if>
      <if test="replica != null" >
        replica,
      </if>
      <if test="createDatetime != null" >
        create_datetime,
      </if>
      <if test="deleteDatetime != null" >
        delete_datetime,
      </if>
      <if test="oldVersionId != null" >
        old_version_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="applicationId != null" >
        #{applicationId,jdbcType=INTEGER},
      </if>
      <if test="versionName != null" >
        #{versionName,jdbcType=VARCHAR},
      </if>
      <if test="versionType != null" >
        #{versionType,jdbcType=VARCHAR},
      </if>
      <if test="replica != null" >
        #{replica,jdbcType=INTEGER},
      </if>
      <if test="createDatetime != null" >
        #{createDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleteDatetime != null" >
        #{deleteDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="oldVersionId != null" >
        #{oldVersionId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.abcsys.devops.v2.deployer.db.model.V2Version" >
    update v2_version
    <set >
      <if test="applicationId != null" >
        application_id = #{applicationId,jdbcType=INTEGER},
      </if>
      <if test="versionName != null" >
        version_name = #{versionName,jdbcType=VARCHAR},
      </if>
      <if test="versionType != null" >
        version_type = #{versionType,jdbcType=VARCHAR},
      </if>
      <if test="replica != null" >
        replica = #{replica,jdbcType=INTEGER},
      </if>
      <if test="createDatetime != null" >
        create_datetime = #{createDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleteDatetime != null" >
        delete_datetime = #{deleteDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="oldVersionId != null" >
        old_version_id = #{oldVersionId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.abcsys.devops.v2.deployer.db.model.V2Version" >
    update v2_version
    set application_id = #{applicationId,jdbcType=INTEGER},
    version_name = #{versionName,jdbcType=VARCHAR},
    version_type = #{versionType,jdbcType=VARCHAR},
    replica = #{replica,jdbcType=INTEGER},
    create_datetime = #{createDatetime,jdbcType=TIMESTAMP},
    delete_datetime = #{deleteDatetime,jdbcType=TIMESTAMP},
    old_version_id = #{oldVersionId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="insertOrGetVersion" statementType="CALLABLE" >
    {call insertOrGetVersion(
    #{application_id, mode=IN},
    #{vname, mode=IN},
    #{vtype, mode=IN},
    #{version_id, jdbcType=INTEGER ,mode=OUT}
    )}
  </select>

  <select id="insertOrGetVersionIfNotExist" statementType="CALLABLE" >
    {call insertOrGetVersionIfNotExist(
    #{application_id, mode=IN},
    #{vname, mode=IN},
    #{vtype, mode=IN},
    #{version_id, jdbcType=INTEGER ,mode=OUT}
    )}
  </select>

  <select id="getVersion" statementType="CALLABLE" >
    {call getVersion(
    #{application_id, mode=IN},
    #{vname, mode=IN},
    #{version_id, jdbcType=INTEGER ,mode=OUT}
    )}
  </select>
</mapper>